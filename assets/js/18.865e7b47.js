(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{382:function(e,a,l){"use strict";l.r(a);var r=l(19),t=Object(r.a)({},(function(){var e=this,a=e.$createElement,l=e._self._c||a;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h2",{attrs:{id:"webpack"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),l("h3",{attrs:{id:"你做过哪些webpack优化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#你做过哪些webpack优化"}},[e._v("#")]),e._v(" 你做过哪些Webpack优化")]),e._v(" "),l("h4",{attrs:{id:"优化-webpack-的构建速度"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#优化-webpack-的构建速度"}},[e._v("#")]),e._v(" 优化 Webpack 的构建速度")]),e._v(" "),l("ul",[l("li",[e._v("使用高版本的 Webpack （使用webpack4）")]),e._v(" "),l("li",[e._v("多线程/多实例构建：HappyPack(不维护了)、thread-loader")]),e._v(" "),l("li",[e._v("缩小打包作用域：\n"),l("ol",[l("li",[e._v("exclude/include (确定 loader 规则范围)")]),e._v(" "),l("li",[e._v("resolve.modules 指明第三方模块的绝对路径 (减少不必要的查找)")]),e._v(" "),l("li",[e._v("resolve.extensions 尽可能减少后缀尝试的可能性")]),e._v(" "),l("li",[e._v("noParse 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 import、require、define 等模块化语句)")]),e._v(" "),l("li",[e._v("IgnorePlugin (完全排除模块)")]),e._v(" "),l("li",[e._v("合理使用alias")])])]),e._v(" "),l("li",[e._v("充分利用缓存提升二次构建速度：\n"),l("ol",[l("li",[e._v("babel-loader 开启缓存")]),e._v(" "),l("li",[e._v("terser-webpack-plugin 开启缓存")]),e._v(" "),l("li",[e._v("使用 cache-loader 或者 hard-source-webpack-plugin\n注意：thread-loader 和 cache-loader 兩個要一起使用的話，請先放 cache-loader 接著是 thread-loader 最後才是 heavy-loader")])])]),e._v(" "),l("li",[e._v("DLL：\n"),l("ol",[l("li",[e._v("使用 DllPlugin 进行分包，使用 DllReferencePlugin(索引链接) 对 manifest.json 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间。")])])])])])}),[],!1,null,null,null);a.default=t.exports}}]);