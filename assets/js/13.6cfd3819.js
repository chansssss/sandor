(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{367:function(t,a,s){"use strict";s.r(a);var n=s(19),e=function(t){t.options.__data__block__={mermaid_382ee1e1:"graph LR\n浏览器缓存 --\x3e 操作系统缓存\n操作系统缓存 --\x3e 路由器缓存\n路由器缓存 --\x3e ISP网络供应商\nISP网络供应商 --\x3e 根域名服务\n",mermaid_382ee200:"sequenceDiagram\n    Client --\x3e Server: 建立连接\n    Client ->> Server: 发送请求\n    Server ->> Client: 响应请求并返回数据\n    Client --\x3e Server: 建立断开连接\n",mermaid_382ee23f:"graph LR\n构建DOM --\x3e 构建CSSDOM\n构建CSSDOM --\x3e 构建渲染树\n构建渲染树 --\x3e 布局\n布局 --\x3e 绘制\n",mermaid_64a570aa:"graph TD\n    A[Html] --\x3e B[Head];\n    A[Html] --\x3e C[Body];\n    B[Head] --\x3e D[Title];\n    B[Head] --\x3e E[Link];\n    C[Body] --\x3e F[Div];\n    F[Div] --\x3e G[H1];\n    F[Div] --\x3e H[P];\n    G[H1] --\x3e I[TextNode<br>html渲染过程];\n    H[P] --\x3e J[TextNode<br>这是一个段落];\n\n",mermaid_64a5709a:"graph TD\n    A[Html<br>padding: 0<br>margin: 0] --\x3e C[Body<br>font-size: 14px];\n    C[Body<br>font-size: 14px] --\x3e F[Div<br>width: 300px<br>height: 200px<br>color: black];\n    F[Div<br>width: 300px<br>height: 200px<br>color: black] --\x3e G[H1<br>color: gray];\n    F[Div<br>width: 300px<br>height: 200px<br>color: black] --\x3e H[P<br>font-size: 12px<br>display: none];\n",mermaid_64a5705e:"graph TD\n    A[Html<br>padding: 0<br>margin: 0] --\x3e C[Body<br>font-size: 14px];\n    C[Body<br>font-size: 14px] --\x3e F[Div<br>width: 300px<br>height: 200px<br>color: black];\n    F[Div<br>width: 300px<br>height: 200px<br>color: black] --\x3e G[H1<br>color: gray];\n    G[H1<br>color: gray] --\x3e J[TextNode<br>这是一个段落];\n"}},r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"浏览器相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器相关"}},[t._v("#")]),t._v(" 浏览器相关")]),t._v(" "),s("h3",{attrs:{id:"web时代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web时代"}},[t._v("#")]),t._v(" web时代")]),t._v(" "),s("p",[t._v("1989 年 3 月 12 日，在瑞士的欧洲核子研究中心 (CERN) 工作的蒂姆·伯纳斯-李 (Timothy John Berners-Lee) 向他的老板递交了一篇题目为“Information Management: A Proposal”的建议书。后来人们把这一天当作万维网 (WWW, World Wide Web) 诞生的日子。")]),t._v(" "),s("ul",[s("li",[t._v("1990年，蒂姆·伯纳斯-李发明了第一个网页浏览器WorldWideWeb。")]),t._v(" "),s("li",[t._v("1995年，微软的Internet Explorer首次推出。")]),t._v(" "),s("li",[t._v("2002年，Mozilla发布Phoenix（Firefox的前身）。")]),t._v(" "),s("li",[t._v("2003年，苹果公司发行Safari测试版。")]),t._v(" "),s("li",[t._v("2008年，Google发布Chrome。")])]),t._v(" "),s("h3",{attrs:{id:"从输入一个url并按下回车键之后发生了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从输入一个url并按下回车键之后发生了什么"}},[t._v("#")]),t._v(" 从输入一个url并按下回车键之后发生了什么？")]),t._v(" "),s("blockquote",[s("p",[t._v("下面的讲解基于chrome")])]),t._v(" "),s("h4",{attrs:{id:"一、url-解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、url-解析"}},[t._v("#")]),t._v(" 一、URL 解析")]),t._v(" "),s("p",[t._v("首先浏览器判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行字符编码等操作。")]),t._v(" "),s("h4",{attrs:{id:"二、dns-查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、dns-查询"}},[t._v("#")]),t._v(" 二、DNS 查询")]),t._v(" "),s("blockquote",[s("p",[t._v("DNS的作用就是将你输入的url转成公网ip")])]),t._v(" "),s("p",[t._v("查询ip步骤：")]),t._v(" "),s("Mermaid",{attrs:{id:"mermaid_382ee1e1",graph:t.$dataBlock.mermaid_382ee1e1}}),s("p",[t._v("根据上图的流程一层一层的查询，直至查询到对应的ip")]),t._v(" "),s("h4",{attrs:{id:"三、http通讯"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、http通讯"}},[t._v("#")]),t._v(" 三、http通讯")]),t._v(" "),s("p",[t._v("通过http协议向服务端（上一步获取到的ip）发送请求并得到响应数据")]),t._v(" "),s("Mermaid",{attrs:{id:"mermaid_382ee200",graph:t.$dataBlock.mermaid_382ee200}}),s("h4",{attrs:{id:"四、渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、渲染"}},[t._v("#")]),t._v(" 四、渲染")]),t._v(" "),s("p",[t._v("通过第三步得到的数据进行处理"),s("br"),t._v("\n1.如果html就执行渲染流程（交给浏览器的渲染进程进行渲染然后输出给gpu）。"),s("br"),t._v("\n2.其他的类型就执行对象的处理流程。")]),t._v(" "),s("h3",{attrs:{id:"页面渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#页面渲染"}},[t._v("#")]),t._v(" 页面渲染")]),t._v(" "),s("blockquote",[s("p",[t._v("渲染器进程的核心工作是将HTML，CSS和JavaScript转换为用户可以与之交互的网页。")])]),t._v(" "),s("p",[t._v("上一节我们简单的介绍了从输入一个url到用户看到页面发生了哪些事情，我们知道了从服务器请求到的html会交给浏览器的渲染进程，下面我们来了解下html是如何被渲染的（以下内容基于chrome浏览器）。")]),t._v(" "),s("h4",{attrs:{id:"关键渲染路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关键渲染路径"}},[t._v("#")]),t._v(" 关键渲染路径")]),t._v(" "),s("Mermaid",{attrs:{id:"mermaid_382ee23f",graph:t.$dataBlock.mermaid_382ee23f}}),s("p",[t._v("网页请求从HTML文件请求开始。服务器返回HTML-响应头和数据。然后浏览器开始解析HTML，转换收到的数据为DOM树。或者嵌入的图片引用。有时请求会分割，这意味着解析剩下的HTML会被终止直到重要的资源被处理。浏览器接着解析HTML，发请求和构造DOM直到文件末尾，这时开始构造CSS对象模型。等到DOM和CSSOM完成之后，浏览器构造渲染树，计算所有可见内容的样式，然后开始计算所有渲染树元素的位置和大小。完成之后，页面被渲染完成，或者说是绘制到屏幕上。")]),t._v(" "),s("h4",{attrs:{id:"构建dom树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建dom树"}},[t._v("#")]),t._v(" 构建DOM树")]),t._v(" "),s("blockquote",[s("p",[t._v("这里需要注意的是当解析html遇到了link、script等需要请求外部资源的元素时，会暂停html的解析。")])]),t._v(" "),s("p",[t._v("当浏览器读取HTML代码，每当遇到一个HTML元素等html，body，div等，将元素创建为JavaScript对象节点（DOM）。最终，所有HTML元素都将转换为JavaScript对象。由于每个HTML元素都有不同的属性，因此将通过不同的类（构造函数）创建Dom对象。")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token doctype"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),s("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token name"}},[t._v("HTML")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Rendering Test"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- stylesheet --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("stylesheet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("./style.css"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("html渲染过程"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("这是一个段落."),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- script --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("./main.js"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token script"}}),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("上面代码将会渲染如下所示的Dom树")]),t._v(" "),s("Mermaid",{attrs:{id:"mermaid_64a570aa",graph:t.$dataBlock.mermaid_64a570aa}}),s("h4",{attrs:{id:"构建cssdom树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建cssdom树"}},[t._v("#")]),t._v(" 构建CSSDOM树")]),t._v(" "),s("p",[t._v("构建DOM之后，浏览器将从所有源（外部，嵌入，内联，浏览器默认样式表等）读取CSS并构建CSSOM。CSSOM代表CSS对象模型，它是一个类似于DOM的树状结构。\n该树中的每个节点都包含CSS样式信息，这些样式信息将应用于它所针对的DOM元素（由选择器指定）。大多数浏览器都带有自己的样式表，浏览器首先通过使用开发者属性提供的CSS覆盖默认样式表来计算DOM元素的最终CSS属性，构造一个节点。")]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("html")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("padding")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("margin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("body")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 14px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".container")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 300px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 200px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" black"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".container > h1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".container > p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 12px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" none"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("Mermaid",{attrs:{id:"mermaid_64a5709a",graph:t.$dataBlock.mermaid_64a5709a}}),s("h4",{attrs:{id:"构建渲染树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建渲染树"}},[t._v("#")]),t._v(" 构建渲染树")]),t._v(" "),s("blockquote",[s("p",[t._v("注意，像display:none 的元素会被渲染树忽略掉\n渲染树也是一种通过将DOM和CSSOM树组合在一起而构建的树状结构，渲染树每个节点包含Dom和它的样式信息。")])]),t._v(" "),s("Mermaid",{attrs:{id:"mermaid_64a5705e",graph:t.$dataBlock.mermaid_64a5705e}}),s("h4",{attrs:{id:"布局-layout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布局-layout"}},[t._v("#")]),t._v(" 布局（Layout）")]),t._v(" "),s("p",[t._v("布局是浏览器计算各元素几何信息的过程: 元素的大小以及在页面中的位置。 根据 CSS、元素的内容或父级元素，每个元素都将有显式或隐含的大小信息。此过程在 Chrome、Opera、Safari 和 Internet Explorer 中称为布局 (Layout)。 在 Firefox 中称为自动重排 (Reflow)，但实际上其过程是一样的。")]),t._v(" "),s("h4",{attrs:{id:"绘制-paint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#绘制-paint"}},[t._v("#")]),t._v(" 绘制（Paint）")]),t._v(" "),s("ol",[s("li",[t._v("根据 渲染树 将其分割为多个层。")]),t._v(" "),s("li",[t._v("将每个层绘制进位图中。")]),t._v(" "),s("li",[t._v("将层作为纹理上传至 GPU。")]),t._v(" "),s("li",[t._v("复合多个层来生成最终的屏幕图像。")])]),t._v(" "),s("div",{staticClass:"webview",staticStyle:{width:"100%",height:"auto",padding:"10px",border:"1px solid #e1e4e8","box-sizing":"border-box"}},[s("div",{staticClass:"container",attrs:{"webview-dksd2k":""}},[s("h1",[t._v("html渲染过程")]),t._v(" "),s("p",[t._v("这是一个段落.")])]),t._v(" "),s("style",[t._v("\n.container[webview-dksd2k] {\n    width: 300px;\n    height: 200px;\n    color: black;\n    background-color: #95a5a6;\n    z-index:999;\n}\n.container[webview-dksd2k] > h1 {\n    color: gray;\n}\n.container[webview-dksd2k] > p {\n    font-size: 12px;\n    display: none;\n}\n")])]),s("h3",{attrs:{id:"reflow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflow"}},[t._v("#")]),t._v(" Reflow")]),t._v(" "),s("p",[t._v("Reflow（重排）指的是计算页面布局（Layout）。某个节点Reflow时会重新计算节点的尺寸和位置，而且还有可能触其后代节点Reflow, 在这之后再次触发一次Repaint（重绘）。")]),t._v(" "),s("p",[t._v("以下情况会导致回流：")]),t._v(" "),s("ul",[s("li",[t._v("调整窗口大小")]),t._v(" "),s("li",[t._v("改变字体")]),t._v(" "),s("li",[t._v("增加或者移除样式表")]),t._v(" "),s("li",[t._v("内容变化")]),t._v(" "),s("li",[t._v("激活CSS伪类")]),t._v(" "),s("li",[t._v("操作CSS属性")]),t._v(" "),s("li",[t._v("JavaScript操作DOM")]),t._v(" "),s("li",[t._v("计算offsetWidth和offsetHeight")]),t._v(" "),s("li",[t._v("设置style属性的值")]),t._v(" "),s("li",[t._v("CSS3 Animation或Transition")])]),t._v(" "),s("h3",{attrs:{id:"repaint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#repaint"}},[t._v("#")]),t._v(" Repaint")]),t._v(" "),s("h4",{attrs:{id:"了解层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#了解层"}},[t._v("#")]),t._v(" 了解层")]),t._v(" "),s("blockquote",[s("p",[t._v("Chrome 中有不同类型的层： RenderLayer(负责 DOM 子树)，GraphicsLayer(负责 RenderLayer 的子树)。我们感兴趣的是后者，因为只有 GraphicsLayer 是作为纹理(texture)上传给 GPU 的。后面我将只用「层」来代表 GraphicsLayer。"),s("br"),t._v("\n在绘制的流程中，浏览器会把Dom转成层（layer）,我们利用chrome devtool可以观察到页面的层信息。打开chrome的开发者工具 --\x3e More tools --\x3e Layers")])])],1)}),[],!1,null,null,null);"function"==typeof e&&e(r);a.default=r.exports}}]);